Iterative: 
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        Queue<TreeNode> q= new LinkedList<TreeNode>();
        List<Integer> sol= new ArrayList<>();
        if(root==null) return sol;
        q.add(root);
        while(!q.isEmpty()){
            int size= q.size();
            for(int i=0;i<size;i++){
                TreeNode curr= q.remove();
                if(i==size-1) sol.add(curr.val);
                if(curr.left!=null) q.add(curr.left);
                if(curr.right!=null) q.add(curr.right);
            }
        }
        return sol;
    }
}
TC: O(N)// all nodes explore
SC: O(N)// queue all node will get stored

recursive:
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> arr= new ArrayList<>();
        rightView(root, 0, arr);
        return arr;
    }
    public void rightView(TreeNode root, int level, List<Integer> arr){
        if(root==null) return;
        if(arr.size()==level)  arr.add(root.val);
        if(root.right!=null) rightView(root.right, level+1, arr);
        if(root.left!=null) rightView(root.left, level+1, arr);
        return;
    }
}
TC: O(N)// all nodes explore
SC: O(H)// auxlillary space
