class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;
        int lh= height(root.left);
        int rh= height(root.right);
        if(Math.abs(lh-rh)>1) return false;
        if(!isBalanced(root.left)|| !isBalanced(root.right)) return false;
        return true;
    }
    public int height(TreeNode root){
        if(root==null) return 0;
        int left= height(root.left);
        int right= height(root.right);
        return (1+ Math.max(left, right));
    }
}
TC: O(N) traversal * O(N) height


class Solution {
    public boolean isBalanced(TreeNode root) {
        return height(root)!=-1;
    }
    public int height(TreeNode root){
        if(root==null) return 0;
        int left= height(root.left);
        if(left==-1) return -1;
        int right= height(root.right);
        if(right==-1) return -1;

        if(Math.abs(left-right)>1) return -1;
        return (1+ Math.max(height(root.left), height(root.right)));
    }
}
TC: o(N)
